//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BukkitUI.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "12.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        /// <summary>
        /// Whether the Craftbukkit server should be started automatically.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Whether the Craftbukkit server should be started automatically.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool autoStartServer {
            get {
                return ((bool)(this["autoStartServer"]));
            }
            set {
                this["autoStartServer"] = value;
            }
        }
        
        /// <summary>
        /// Whether the server should be rebooted automatically during runtime.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Whether the server should be rebooted automatically during runtime.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool autoRebootServer {
            get {
                return ((bool)(this["autoRebootServer"]));
            }
            set {
                this["autoRebootServer"] = value;
            }
        }
        
        /// <summary>
        /// The interval, in which the server is restarted.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("The interval, in which the server is restarted.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("60")]
        public short serverRebootInterval {
            get {
                return ((short)(this["serverRebootInterval"]));
            }
            set {
                this["serverRebootInterval"] = value;
            }
        }
        
        /// <summary>
        /// Whether BukkitUI should automatically check for updates.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Whether BukkitUI should automatically check for updates.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool checkForUpdates {
            get {
                return ((bool)(this["checkForUpdates"]));
            }
            set {
                this["checkForUpdates"] = value;
            }
        }
        
        /// <summary>
        /// Whether BukkitUI should check for updates during startup
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Whether BukkitUI should check for updates during startup")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool checkForUpdatesOnStartup {
            get {
                return ((bool)(this["checkForUpdatesOnStartup"]));
            }
            set {
                this["checkForUpdatesOnStartup"] = value;
            }
        }
        
        /// <summary>
        /// Wether BukkitUI should check for updates during shutdown.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Wether BukkitUI should check for updates during shutdown.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool checkForUpdatesOnShutdown {
            get {
                return ((bool)(this["checkForUpdatesOnShutdown"]));
            }
            set {
                this["checkForUpdatesOnShutdown"] = value;
            }
        }
        
        /// <summary>
        /// Wether BukkitUI should check for updates during runtime
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Wether BukkitUI should check for updates during runtime")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool checkForUpdatesDuringRuntime {
            get {
                return ((bool)(this["checkForUpdatesDuringRuntime"]));
            }
            set {
                this["checkForUpdatesDuringRuntime"] = value;
            }
        }
        
        /// <summary>
        /// Use the &apos;Aero&apos; design
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Use the \'Aero\' design")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool extendDWMIntoClient {
            get {
                return ((bool)(this["extendDWMIntoClient"]));
            }
            set {
                this["extendDWMIntoClient"] = value;
            }
        }
        
        /// <summary>
        /// The Craftbukkit server file.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("The Craftbukkit server file.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string bukkit {
            get {
                return ((string)(this["bukkit"]));
            }
            set {
                this["bukkit"] = value;
            }
        }
        
        /// <summary>
        /// The directory in which the Craftbukkit server is stored.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("The directory in which the Craftbukkit server is stored.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string bukkitDir {
            get {
                return ((string)(this["bukkitDir"]));
            }
            set {
                this["bukkitDir"] = value;
            }
        }
        
        /// <summary>
        /// The Java executable file.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("The Java executable file.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("n/a")]
        public string javaEXE {
            get {
                return ((string)(this["javaEXE"]));
            }
            set {
                this["javaEXE"] = value;
            }
        }
        
        /// <summary>
        /// The initial Java VM heap size
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("The initial Java VM heap size")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1024")]
        public int javaInitSizeInMegs {
            get {
                return ((int)(this["javaInitSizeInMegs"]));
            }
            set {
                this["javaInitSizeInMegs"] = value;
            }
        }
        
        /// <summary>
        /// The maximum Java heap size in Megs
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("The maximum Java heap size in Megs")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2048")]
        public int javaMaxSizeInMegs {
            get {
                return ((int)(this["javaMaxSizeInMegs"]));
            }
            set {
                this["javaMaxSizeInMegs"] = value;
            }
        }
        
        /// <summary>
        /// Wether BukkitUI should use pre-set heap sizes are custom ones.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("Wether BukkitUI should use pre-set heap sizes are custom ones.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool useCustomHeapSize {
            get {
                return ((bool)(this["useCustomHeapSize"]));
            }
            set {
                this["useCustomHeapSize"] = value;
            }
        }
        
        /// <summary>
        /// The selected memory (heap size) allocation mode.
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("The selected memory (heap size) allocation mode.")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Auto")]
        public string serverAllocationMode {
            get {
                return ((string)(this["serverAllocationMode"]));
            }
            set {
                this["serverAllocationMode"] = value;
            }
        }
    }
}
