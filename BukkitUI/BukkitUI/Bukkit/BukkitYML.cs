using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;

namespace BukkitUI.Bukkit {
    public class BukkitYML {

        ///
        /// I'd like to note, that I am not using excessive details for the property names, as this isn't an API.
        /// If you don't like it, feel free to leave it alone :)
        ///
        #region Properties
        // settings
        public bool allowEnd { get; set; }
        public bool warnOnOverload { get; set; }
        public string permissionsFile { get; set; }
        public string updateFolder { get; set; }
        public int pingPacketLimit { get; set; }
        public bool useExactLoginLocation { get; set; }
        public bool pluginProfiling { get; set; }
        public int connectionThrottle { get; set; }
        public bool queryPlugins { get; set; }
        public string deprecatedVerbose { get; set; }
        public string shutdownMessage { get; set; }
        // Spawn Limits
        public int monsters { get; set; }
        public int animals { get; set; }
        public int waterAnimals { get; set; }
        public int ambient { get; set; }
        // Chunk GC
        public int periodInTicks { get; set; }
        public int loadThreshold { get; set; }
        // Ticks per...
        public int animalSpawns { get; set; }
        public int monsterSpawns { get; set; }
        public int autoSave { get; set; }
        // Auto Updater
        public bool autoUpdateEnabled { get; set; }
        public string[] onUpdaterBroken { get; set; }
        public string[] onUpdate { get; set; }
        public string preferredChannel { get; set; }
        public string host { get; set; }
        public bool suggestChannels { get; set; }
        // Database
        public string dbUsername { get; set; }
        public string dbIsolation { get; set; }
        public string dbDriver { get; set; }
        public string dbPassword { get; set; }
        public string dbURL { get; set; }
        #endregion

        public string bukkitLocation { get; set; }
        public Form1 mainForm { get; set; }

        public bool isLoaded { get { return _isLoaded; } }

        private bool _isLoaded = false;
        
        public override string ToString() {
            string bukkitYaml = 
                  "# Main Bukkit Configuration File\n"
                + "# This file was generated by BukkitUI\n"
                + "# There isn't actually that much to configure without plugins, but hey.\n"
                + "# Please note: It is preferred that you modify these configs from within BukkitUI.\n"
                + "settings:\n"
                + "  allow-end: " + allowEnd + "\n"
                + "  warn-on-overload: " + warnOnOverload + "\n"
                + "  update-folder: " + updateFolder + "\n"
                + "  ping-packet-limit: " + pingPacketLimit + "\n"
                + "  use-exact-login-location: " + useExactLoginLocation + "\n"
                + "  plugin-profiling: " + pluginProfiling + "\n"
                + "  connection-throttle: " + connectionThrottle + "\n"
                + "  query-plugins: " + queryPlugins + "\n"
                + "  deprecated-verbose: " + deprecatedVerbose + "\n"
                + "  shutdown-message: " + shutdownMessage + "\n"
                + "spawn-limits:\n"
                + "  monsters: " + monsters + "\n"
                + "  animals: " + animals + "\n"
                + "  water-animals: " + waterAnimals + "\n"
                + "  ambient: " + ambient + "\n"
                + "chunk-gc:\n"
                + "  period-in-ticks: " + periodInTicks + "\n"
                + "  load-threshold: " + loadThreshold + "\n"
                + "ticks-per:\n"
                + "  animal-spawns: " + animalSpawns + "\n"
                + "  monster-spawns: " + monsterSpawns + "\n"
                + "  autosave: " + autoSave + "\n"
                + "auto-updater:\n"
                + "  enabled: " + autoUpdateEnabled + "\n"
                + "  on-broken:\n";
            foreach (string s in onUpdaterBroken)
                bukkitYaml += "  - " + s + "\n";
            bukkitYaml += "  on-update:\n";
            foreach (string s in onUpdate)
                bukkitYaml += "  - " + s + "\n";
            bukkitYaml += 
                  "  preferred-channel: " + preferredChannel + "\n"
                + "  host: " + host + "\n"
                + "  suggest-channels: " + suggestChannels + "\n"
                + "database:\n"
                + "  username: " + dbUsername + "\n"
                + "  isolation: " + dbIsolation + "\n"
                + "  driver: " + dbDriver + "\n"
                + "  password: " + dbPassword + "\n"
                + "  url: " + dbURL + "\n\n"
                
                + "# End configuration. That was a bitch to code...";

            return bukkitYaml;
        }

        public BukkitYML(string bukkitLocation, bool forceReset, Form1 mainForm) {
            this.bukkitLocation = bukkitLocation;
            this.mainForm = mainForm;
            load(forceReset);
        }

        public void load(bool forceReset) {
            if (forceReset || !File.Exists(Path.Combine(bukkitLocation, "bukkit.yml")))
                #region Cleaning up this Try-Catch
                try {
                    // Write default values into properties, before saving.
                    allowEnd = true;
                    warnOnOverload = true;
                    permissionsFile = "permissions.yml";
                    updateFolder = ".update";
                    pingPacketLimit = 100;
                    useExactLoginLocation = false;
                    pluginProfiling = false;
                    connectionThrottle = 4000;
                    queryPlugins = true;
                    deprecatedVerbose = "default";
                    shutdownMessage = "Server Closed. Powered by BukkitUI for Windows.";
                    monsters = 70;
                    animals = 15;
                    waterAnimals = 5;
                    ambient = 15;
                    periodInTicks = 666;
                    loadThreshold = 0;
                    animalSpawns = 400;
                    monsterSpawns = 10;
                    autoSave = 6000;
                    autoUpdateEnabled = true;
                    onUpdaterBroken = new string[] { "warn-console", "warn-ops" };
                    onUpdate = onUpdaterBroken;
                    preferredChannel = "rb";
                    host = "dl.bukkit.org";
                    suggestChannels = true;
                    dbUsername = "bukkit";
                    dbIsolation = "SERIALIZABLE";
                    dbDriver = "org.sqlite.JDBC";
                    dbPassword = "walrus";
                    dbURL = "jdbc:sqlite:{DIR}{name.db}";
                    save();
                    return;
                } catch (IOException ex) {
                    MessageBox.Show(mainForm, 
                          "An error occurred while creating the Bukkit YAML (Config) file: " + ex.Message + "\n"
                        + "Please close all BukkitUI instances and make sure BukkitUI has permission to write to\n"
                        + bukkitLocation + " before continuing. If necessary, please restart the computer!\n\n"
                        + "Error stack trace:\n" + ex.StackTrace, "Error Writing Bukkit Config!", 
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                #endregion

            using (StringReader reader = new StringReader(File.ReadAllText(Path.Combine(bukkitLocation, "bukkit.yml")))) {
                #region Just parsing the file...
                string line;
                string[] splitVals;

                while ((line = reader.ReadLine()) != null) {
                    if (line.StartsWith("#")) continue;
                    // Read settings
                    if (line.StartsWith("  allow-end:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        allowEnd = bool.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  warn-on-overload:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        warnOnOverload = bool.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  permissions-file")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        permissionsFile = splitVals[1];
                        continue;
                    }
                    if (line.StartsWith("  update-folder")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        updateFolder = splitVals[1];
                        continue;
                    }
                    if (line.StartsWith("  ping-packet-limit:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        pingPacketLimit = int.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  use-exact-login-location:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        useExactLoginLocation = bool.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  plugin-profiling:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        pluginProfiling = bool.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  connection-throttle:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        connectionThrottle = int.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  query-plugins:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        queryPlugins = bool.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  deprecated-verbose:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        deprecatedVerbose = splitVals[1];
                        continue;
                    }
                    if (line.StartsWith("  shutdown-message:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        shutdownMessage = splitVals[1];
                        continue;
                    }
                    // Read spawn limits
                    if (line.StartsWith("  monsters:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        monsters = int.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  animals:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        animals = int.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  water-animals:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        waterAnimals = int.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  ambient:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        ambient = int.Parse(splitVals[1]);
                        continue;
                    }
                    // Read chunk-GC
                    if (line.StartsWith("  period-in-ticks:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        periodInTicks = int.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  load-threshold:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        loadThreshold = int.Parse(splitVals[1]);
                        continue;
                    }
                    // Read Ticks per...
                    if (line.StartsWith("  animal-spawns:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        animalSpawns = int.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  monster-spawns:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        monsterSpawns = int.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  autosave:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        autoSave = int.Parse(splitVals[1]);
                        continue;
                    }
                    // Read Auto-Updater
                    if (line.StartsWith("  enabled:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        autoUpdateEnabled = bool.Parse(splitVals[1]);
                        continue;
                    }
                    if (line.StartsWith("  on-broken:")) { 
                        List<String> values = new List<String>();
                        while ((line = reader.ReadLine()).StartsWith("  - ")) {
                            if (line.Contains("on-broken")) break;
                            values.Add(line.Replace("  - ", ""));
                        }
                        onUpdaterBroken = values.ToArray();
                    }
                    if (line.StartsWith("  on-update:")) {
                        List<String> values = new List<String>();
                        while ((line = reader.ReadLine()).StartsWith("  - ")) {
                            if (line.Contains("preferred")) break;
                            values.Add(line.Replace("  - ", ""));
                        }
                        onUpdate = values.ToArray();
                    }
                    if (line.StartsWith("  preferred-channel:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        preferredChannel = splitVals[1];
                        continue;
                    }
                    if (line.StartsWith("  host:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        host = splitVals[1];
                        continue;
                    }
                    if (line.StartsWith("  suggest-channels:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        suggestChannels = bool.Parse(splitVals[1]);
                        continue;
                    }
                    // Read Database
                    if (line.StartsWith("  username:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        dbUsername = splitVals[1];
                        continue;
                    }
                    if (line.StartsWith("  isolation:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        dbIsolation = splitVals[1];
                        continue;
                    }
                    if (line.StartsWith("  driver:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        dbDriver = splitVals[1];
                        continue;
                    }
                    if (line.StartsWith("  password:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        dbPassword = splitVals[1];
                        continue;
                    }
                    if (line.StartsWith("  url:")) {
                        splitVals = line.Split(':');
                        splitVals[1].Trim();
                        dbURL = splitVals[1];
                        continue;
                    }

                }
                #endregion
                reader.Dispose();
            }
            _isLoaded = true;

        }

        public void save() {
            if (!File.Exists(Path.Combine(bukkitLocation, "bukkit.yml")))
                MessageBox.Show("Saving to: " + Path.Combine(bukkitLocation, "bukkit.yml"));
                File.Create(Path.Combine(bukkitLocation, "bukkit.yml")).Close();
                System.Threading.Thread.Sleep(1000);
            File.WriteAllText(Path.Combine(bukkitLocation, "bukkit.yml"), ToString());
            load(false);
        }

    }
}
