<?xml version="1.0" encoding="utf-8"?><html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns="http://www.w3.org/1999/xhtml"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><title>AddEntry Method (entryName, writer)</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><meta name="file" content="633c4280-51ca-cc82-b5b5-86bbe9b2e947" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.WriteDelegate)" /><MSHelp:Keyword Index="A" Term="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.WriteDelegate)" /><MSHelp:Keyword Index="A" Term="frlrfIonicZipZipFileClassAddEntryTopic" /><MSHelp:Keyword Index="K" Term="AddEntry method" /><MSHelp:Keyword Index="K" Term="ZipFile.AddEntry method" /><MSHelp:Keyword Index="F" Term="AddEntry" /><MSHelp:Keyword Index="F" Term="ZipFile.AddEntry" /><MSHelp:Keyword Index="F" Term="Ionic.Zip.ZipFile.AddEntry" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="Ionic.Zip.dll" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.ZipFile.AddEntry" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="Add a ZipEntry for which content is written directly by the application." /></xml><link type="text/css" rel="stylesheet" /><script type="text/javascript"></script><meta name="SelfBranded" content="true" /><meta name="ContentType" content="Reference" /><meta name="Microsoft.Help.TopicVersion" content="100" /><meta name="Microsoft.Help.Keywords" content="AddEntry method" /><meta name="Microsoft.Help.Keywords" content="ZipFile.AddEntry method" /><meta name="Microsoft.Help.F1" content="AddEntry" /><meta name="Microsoft.Help.F1" content="ZipFile.AddEntry" /><meta name="Microsoft.Help.F1" content="Ionic.Zip.ZipFile.AddEntry" /><meta name="Description" content="Add a ZipEntry for which content is written directly by the application." /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.WriteDelegate)" /><meta name="Microsoft.Help.TocParent" content="M:Ionic.Zip.ZipFile.AddEntry(System.String,Ionic.Zip.OpenDelegate,Ionic.Zip.CloseDelegate)" /><meta name="Microsoft.Help.TOCParentTopicVersion" content="100" /><meta name="Microsoft.Help.TocOrder" content="1" /></head><body><div id="control"><span class="productTitle">Ionic Zip Library v1.9.1.6</span><br /><span class="topicTitle">AddEntry Method (entryName, writer)</span><br /><div id="toolbar"><span id="chickenFeet"><a href="ms-xhelp://?Id=R:Project">Reference</a> ► <a href="ms-xhelp://?Id=N:Ionic.Zip">Ionic.Zip</a> ► <a href="ms-xhelp://?Id=T:Ionic.Zip.ZipFile">ZipFile</a> ► <span class="selflink">AddEntry(String, WriteDelegate)</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs" /><option value="VisualBasic vb" /><option value="ManagedCPlusPlus cpp" /></select></span></div></div><div id="main"><span style="color: DarkGray"></span><div class="summary">
               Add a ZipEntry for which content is written directly by the application.
             </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Declaration Syntax</div><div class="sectionContent"><div id="syntaxSection"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="toggleClass('syntaxTabs','x-lang','CSharp','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','CSharp','display','block','none');" /><td class="tab" x-lang="VisualBasic" onclick="toggleClass('syntaxTabs','x-lang','VisualBasic','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','VisualBasic','display','block','none');" /><td class="tab" x-lang="ManagedCPlusPlus" onclick="toggleClass('syntaxTabs','x-lang','ManagedCPlusPlus','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','ManagedCPlusPlus','display','block','none');" /></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre xml:space="preserve">
<span class="keyword">public</span> <a href="ms-xhelp://?Id=T:Ionic.Zip.ZipEntry">ZipEntry</a> <span class="identifier">AddEntry</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">string</a> <span class="parameter">entryName</span>,
	<a href="ms-xhelp://?Id=T:Ionic.Zip.WriteDelegate">WriteDelegate</a> <span class="parameter">writer</span>
)</pre></div><div class="code" x-lang="VisualBasic"><pre xml:space="preserve">
<span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">AddEntry</span> ( _
	<span class="parameter">entryName</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>, _
	<span class="parameter">writer</span> <span class="keyword">As</span> <a href="ms-xhelp://?Id=T:Ionic.Zip.WriteDelegate">WriteDelegate</a> _
) <span class="keyword">As</span> <a href="ms-xhelp://?Id=T:Ionic.Zip.ZipEntry">ZipEntry</a></pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre xml:space="preserve">
<span class="keyword">public</span>:
<a href="ms-xhelp://?Id=T:Ionic.Zip.ZipEntry">ZipEntry</a>^ <span class="identifier">AddEntry</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^ <span class="parameter">entryName</span>, 
	<a href="ms-xhelp://?Id=T:Ionic.Zip.WriteDelegate">WriteDelegate</a>^ <span class="parameter">writer</span>
)</pre></div></div></div></div></div><div id="parameters"><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Parameters</div><div class="sectionContent"><dl paramName="entryName"><dt><span class="parameter">entryName</span> (<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>)</dt><dd>the name of the entry to add</dd></dl><dl paramName="writer"><dt><span class="parameter">writer</span> (<a href="ms-xhelp://?Id=T:Ionic.Zip.WriteDelegate">WriteDelegate</a>)</dt><dd>the delegate which will write the entry content</dd></dl></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Return Value</div><div class="sectionContent">the ZipEntry added</div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Remarks</div><div class="sectionContent"><p>
               When the application needs to write the zip entry data, use this
               method to add the ZipEntry. For example, in the case that the
               application wishes to write the XML representation of a DataSet into
               a ZipEntry, the application can use this method to do so.
             </p><p>
               For <span class="code">ZipFile</span> properties including <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipFile.Encryption">Encryption</a>, <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipFile.Password">Password</a>, <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipFile.SetCompression">SetCompression</a>, <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</a>, <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipFile.ExtractExistingFile">ExtractExistingFile</a>,
               <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipFile.ZipErrorAction">ZipErrorAction</a>, and <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipFile.CompressionLevel">CompressionLevel</a>, their
               respective values at the time of this call will be applied to the
               <span class="code">ZipEntry</span> added.
             </p><p>
               About progress events: When using the WriteDelegate, DotNetZip does
               not issue any SaveProgress events with <span class="code">EventType</span> = <a href="ms-xhelp://?Id=F:Ionic.Zip.ZipProgressEventType.Saving_EntryBytesRead">
               Saving_EntryBytesRead</a>. (This is because it is the
               application's code that runs in WriteDelegate - there's no way for
               DotNetZip to know when to issue a EntryBytesRead event.)
               Applications that want to update a progress bar or similar status
               indicator should do so from within the WriteDelegate
               itself. DotNetZip will issue the other SaveProgress events,
               including <a href="ms-xhelp://?Id=F:Ionic.Zip.ZipProgressEventType.Saving_Started">
               Saving_Started</a>,
               <a href="ms-xhelp://?Id=F:Ionic.Zip.ZipProgressEventType.Saving_BeforeWriteEntry">
               Saving_BeforeWriteEntry</a>, and <a href="ms-xhelp://?Id=F:Ionic.Zip.ZipProgressEventType.Saving_AfterWriteEntry">
               Saving_AfterWriteEntry</a>.
             </p><p>
               Note: When you use PKZip encryption, it's normally necessary to
               compute the CRC of the content to be encrypted, before compressing or
               encrypting it. Therefore, when using PKZip encryption with a
               WriteDelegate, the WriteDelegate CAN BE called twice: once to compute
               the CRC, and the second time to potentially compress and
               encrypt. Surprising, but true. This is because PKWARE specified that
               the encryption initialization data depends on the CRC.
               If this happens, for each call of the delegate, your
               application must stream the same entry data in its entirety. If your
               application writes different data during the second call, it will
               result in a corrupt zip file.
             </p><p>
               The double-read behavior happens with all types of entries, not only
               those that use WriteDelegate. It happens if you add an entry from a
               filesystem file, or using a string, or a stream, or an opener/closer
               pair. But in those cases, DotNetZip takes care of reading twice; in
               the case of the WriteDelegate, the application code gets invoked
               twice. Be aware.
             </p><p>
               As you can imagine, this can cause performance problems for large
               streams, and it can lead to correctness problems when you use a
               <span class="code">WriteDelegate</span>. This is a pretty big pitfall.  There are two
               ways to avoid it.  First, and most preferred: don't use PKZIP
               encryption.  If you use the WinZip AES encryption, this problem
               doesn't occur, because the encryption protocol doesn't require the CRC
               up front. Second: if you do choose to use PKZIP encryption, write out
               to a non-seekable stream (like standard output, or the
               Response.OutputStream in an ASP.NET application).  In this case,
               DotNetZip will use an alternative encryption protocol that does not
               rely on the CRC of the content.  This also implies setting bit 3 in
               the zip entry, which still presents problems for some zip tools.
             </p><p>
               In the future I may modify DotNetZip to *always* use bit 3 when PKZIP
               encryption is in use.  This seems like a win overall, but there will
               be some work involved.  If you feel strongly about it, visit the
               DotNetZip forums and vote up <a href="http://dotnetzip.codeplex.com/workitem/13686" target="_blank">the Workitem
               tracking this issue</a>.
             </p></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Examples</div><div class="sectionContent">
            
               This example shows an application filling a DataSet, then saving the
               contents of that DataSet as XML, into a ZipEntry in a ZipFile, using an
               anonymous delegate in C#. The DataSet XML is never saved to a disk file.
            
             <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">var c1= <span class="highlight-keyword">new</span> System.Data.SqlClient.SqlConnection(connstring1);
var da = <span class="highlight-keyword">new</span> System.Data.SqlClient.SqlDataAdapter()
    {
        SelectCommand=  <span class="highlight-keyword">new</span> System.Data.SqlClient.SqlCommand(strSelect, c1)
    };

DataSet ds1 = <span class="highlight-keyword">new</span> DataSet();
da.Fill(ds1, <span class="highlight-literal">"Invoices"</span>);

<span class="highlight-keyword">using</span>(Ionic.Zip.ZipFile zip = <span class="highlight-keyword">new</span> Ionic.Zip.ZipFile())
{
    zip.AddEntry(zipEntryName, (name,stream) =&gt; ds1.WriteXml(stream) );
    zip.Save(zipFileName);
}</pre></div></span></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Examples</div><div class="sectionContent">
            
             This example uses an anonymous method in C# as the WriteDelegate to provide
             the data for the ZipEntry. The example is a bit contrived - the
             <span class="code">AddFile()</span> method is a simpler way to insert the contents of a file
             into an entry in a zip file. On the other hand, if there is some sort of
             processing or transformation of the file contents required before writing,
             the application could use the <span class="code">WriteDelegate</span> to do it, in this way.
            
             <span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">using</span> (var input = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ))
{
    <span class="highlight-keyword">using</span>(Ionic.Zip.ZipFile zip = <span class="highlight-keyword">new</span> Ionic.Zip.ZipFile())
    {
        zip.AddEntry(zipEntryName, (name,output) =&gt;
            {
                <span class="highlight-keyword">byte</span>[] buffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[BufferSize];
                <span class="highlight-keyword">int</span> n;
                <span class="highlight-keyword">while</span> ((n = input.Read(buffer, <span class="highlight-number">0</span>, buffer.Length)) != <span class="highlight-number">0</span>)
                {
                    <span class="highlight-comment">// could transform the data here...</span>
                    output.Write(buffer, <span class="highlight-number">0</span>, n);
                    <span class="highlight-comment">// could update a progress bar here</span>
                }
            });

        zip.Save(zipFileName);
    }
}</pre></div></span></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Examples</div><div class="sectionContent">
            
             This example uses a named delegate in VB to write data for the given
             ZipEntry (VB9 does not have anonymous delegates). The example here is a bit
             contrived - a simpler way to add the contents of a file to a ZipEntry is to
             simply use the appropriate <span class="code">AddFile()</span> method.  The key scenario for
             which the <span class="code">WriteDelegate</span> makes sense is saving a DataSet, in XML
             format, to the zip file. The DataSet can write XML to a stream, and the
             WriteDelegate is the perfect place to write into the zip file.  There may be
             other data structures that can write to a stream, but cannot be read as a
             stream.  The <span class="code">WriteDelegate</span> would be appropriate for those cases as
             well.
            
             <span id="cbc_3" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> WriteEntry (<span class="highlight-keyword">ByVal</span> name <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>, <span class="highlight-keyword">ByVal</span> output <span class="highlight-keyword">As</span> Stream)
    <span class="highlight-keyword">Using</span> input <span class="highlight-keyword">As</span> FileStream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
        <span class="highlight-keyword">Dim</span> n <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">-1</span>
        <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(BufferSize){}
        <span class="highlight-keyword">Do</span> <span class="highlight-keyword">While</span> n &lt;&gt; <span class="highlight-number">0</span>
            n = input.Read(buffer, <span class="highlight-number">0</span>, buffer.Length)
            output.Write(buffer, <span class="highlight-number">0</span>, n)
        <span class="highlight-keyword">Loop</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> Run()
    <span class="highlight-keyword">Using</span> zip = <span class="highlight-keyword">New</span> ZipFile
        zip.AddEntry(zipEntryName, <span class="highlight-keyword">New</span> WriteDelegate(<span class="highlight-keyword">AddressOf</span> WriteEntry))
        zip.Save(zipFileName)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div></div><p><div id="footer"><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:dpchiesa%40hotmail.com?Subject=Ionic Zip Library v1.9.1.6">dpchiesa@hotmail.com</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script><p />Copyright 2009-2011, Dino Chiesa</div>Assembly: <span sdata="assembly">Ionic.Zip</span> (Module: Ionic.Zip) Version: 1.9.1.8 (1.9.1.8)</p></div></body></html>