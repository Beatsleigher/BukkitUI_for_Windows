<?xml version="1.0" encoding="utf-8"?><html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns="http://www.w3.org/1999/xhtml"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><title>ZipInputStream Constructor (stream)</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><meta name="file" content="479339f4-2d5f-40bd-7199-1d894468dc7e" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="M:Ionic.Zip.ZipInputStream.#ctor(System.IO.Stream)" /><MSHelp:Keyword Index="A" Term="M:Ionic.Zip.ZipInputStream.#ctor(System.IO.Stream)" /><MSHelp:Keyword Index="A" Term="frlrfIonicZipZipInputStreamClassctorTopic" /><MSHelp:Keyword Index="K" Term="ZipInputStream constructor" /><MSHelp:Keyword Index="F" Term="ZipInputStream" /><MSHelp:Keyword Index="F" Term="ZipInputStream.ZipInputStream" /><MSHelp:Keyword Index="F" Term="Ionic.Zip.ZipInputStream.ZipInputStream" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="Ionic.Zip.dll" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.ZipInputStream..ctor" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="Create a ZipInputStream, wrapping it around an existing stream." /></xml><link type="text/css" rel="stylesheet" /><script type="text/javascript"></script><meta name="SelfBranded" content="true" /><meta name="ContentType" content="Reference" /><meta name="Microsoft.Help.TopicVersion" content="100" /><meta name="Microsoft.Help.Keywords" content="ZipInputStream constructor" /><meta name="Microsoft.Help.F1" content="ZipInputStream" /><meta name="Microsoft.Help.F1" content="ZipInputStream.ZipInputStream" /><meta name="Microsoft.Help.F1" content="Ionic.Zip.ZipInputStream.ZipInputStream" /><meta name="Description" content="Create a ZipInputStream, wrapping it around an existing stream." /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Ionic.Zip.ZipInputStream.#ctor(System.IO.Stream)" /><meta name="Microsoft.Help.TocParent" content="M:Ionic.Zip.ZipInputStream.#ctor(System.IO.Stream)" /><meta name="Microsoft.Help.TOCParentTopicVersion" content="100" /><meta name="Microsoft.Help.TocOrder" content="0" /></head><body><div id="control"><span class="productTitle">Ionic Zip Library v1.9.1.6</span><br /><span class="topicTitle">ZipInputStream Constructor (stream)</span><br /><div id="toolbar"><span id="chickenFeet"><a href="ms-xhelp://?Id=R:Project">Reference</a> ► <a href="ms-xhelp://?Id=N:Ionic.Zip">Ionic.Zip</a> ► <a href="ms-xhelp://?Id=T:Ionic.Zip.ZipInputStream">ZipInputStream</a> ► <span class="selflink">ZipInputStream(Stream)</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs" /><option value="VisualBasic vb" /><option value="ManagedCPlusPlus cpp" /></select></span></div></div><div id="main"><span style="color: DarkGray"></span><div class="summary">
               Create a <span class="code">ZipInputStream</span>, wrapping it around an existing stream.
             </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Declaration Syntax</div><div class="sectionContent"><div id="syntaxSection"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="toggleClass('syntaxTabs','x-lang','CSharp','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','CSharp','display','block','none');" /><td class="tab" x-lang="VisualBasic" onclick="toggleClass('syntaxTabs','x-lang','VisualBasic','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','VisualBasic','display','block','none');" /><td class="tab" x-lang="ManagedCPlusPlus" onclick="toggleClass('syntaxTabs','x-lang','ManagedCPlusPlus','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','ManagedCPlusPlus','display','block','none');" /></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre xml:space="preserve">
<span class="keyword">public</span> <span class="identifier">ZipInputStream</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/8f86tw9e" target="_blank">Stream</a> <span class="parameter">stream</span>
)</pre></div><div class="code" x-lang="VisualBasic"><pre xml:space="preserve">
<span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">New</span> ( _
	<span class="parameter">stream</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/8f86tw9e" target="_blank">Stream</a> _
)</pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre xml:space="preserve">
<span class="keyword">public</span>:
<span class="identifier">ZipInputStream</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/8f86tw9e" target="_blank">Stream</a>^ <span class="parameter">stream</span>
)</pre></div></div></div></div></div><div id="parameters"><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Parameters</div><div class="sectionContent"><dl paramName="stream"><dt><span class="parameter">stream</span> (<a href="http://msdn2.microsoft.com/en-us/library/8f86tw9e" target="_blank">Stream</a>)</dt><dd>
               The stream to read. It must be readable. This stream will be closed at
               the time the <span class="code">ZipInputStream</span> is closed.
             </dd></dl></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Remarks</div><div class="sectionContent"><p>
               While the <a href="ms-xhelp://?Id=T:Ionic.Zip.ZipFile">ZipFile</a> class is generally easier
               to use, this class provides an alternative to those
               applications that want to read from a zipfile directly,
               using a <a href="http://msdn2.microsoft.com/en-us/library/8f86tw9e" target="_blank">Stream</a>.
             </p><p>
               Both the <span class="code">ZipInputStream</span> class and the <span class="code">ZipFile</span> class can be used
               to read and extract zip files.  Both of them support many of the common zip
               features, including Unicode, different compression levels, and ZIP64.  The
               programming models differ. For example, when extracting entries via calls to
               the <span class="code">GetNextEntry()</span> and <span class="code">Read()</span> methods on the
               <span class="code">ZipInputStream</span> class, the caller is responsible for creating the file,
               writing the bytes into the file, setting the attributes on the file, and
               setting the created, last modified, and last accessed timestamps on the
               file. All of these things are done automatically by a call to <a href="ms-xhelp://?Id=M:Ionic.Zip.ZipEntry.Extract">ZipEntry.Extract()</a>.  For this reason, the
               <span class="code">ZipInputStream</span> is generally recommended for when your application wants
               to extract the data, without storing that data into a file.
             </p><p>
               Aside from the obvious differences in programming model, there are some
               differences in capability between the <span class="code">ZipFile</span> class and the
               <span class="code">ZipInputStream</span> class.
             </p><ul><li><span class="code">ZipFile</span> can be used to create or update zip files, or read and extract
               zip files. <span class="code">ZipInputStream</span> can be used only to read and extract zip
                 files. If you want to use a stream to create zip files, check out the <a href="ms-xhelp://?Id=T:Ionic.Zip.ZipOutputStream">ZipOutputStream</a>.
               </li><li><span class="code">ZipInputStream</span> cannot read segmented or spanned
                 zip files.
               </li><li><span class="code">ZipInputStream</span> will not read Zip file comments.
               </li><li>
                 When reading larger files, <span class="code">ZipInputStream</span> will always underperform
                 <span class="code">ZipFile</span>. This is because the <span class="code">ZipInputStream</span> does a full scan on the
                 zip file, while the <span class="code">ZipFile</span> class reads the central directory of the
                 zip file.
               </li></ul></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Examples</div><div class="sectionContent">
            
               This example shows how to read a zip file, and extract entries, using the
               <span class="code">ZipInputStream</span> class.
            
             <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> Unzip()
{
    <span class="highlight-keyword">byte</span>[] buffer= <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[<span class="highlight-number">2048</span>];
    <span class="highlight-keyword">int</span> n;
    <span class="highlight-keyword">using</span> (var raw = File.Open(inputFileName, FileMode.Open, FileAccess.Read))
    {
        <span class="highlight-keyword">using</span> (var input= <span class="highlight-keyword">new</span> ZipInputStream(raw))
        {
            ZipEntry e;
            <span class="highlight-keyword">while</span> (( e = input.GetNextEntry()) != <span class="highlight-keyword">null</span>)
            {
                <span class="highlight-keyword">if</span> (e.IsDirectory) <span class="highlight-keyword">continue</span>;
                <span class="highlight-keyword">string</span> outputPath = Path.Combine(extractDir, e.FileName);
                <span class="highlight-keyword">using</span> (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                {
                    <span class="highlight-keyword">while</span> ((n= input.Read(buffer, <span class="highlight-number">0</span>, buffer.Length)) &gt; <span class="highlight-number">0</span>)
                    {
                        output.Write(buffer,<span class="highlight-number">0</span>,n);
                    }
                }
            }
        }
    }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> UnZip()
    <span class="highlight-keyword">Dim</span> inputFileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"MyArchive.zip"</span>
    <span class="highlight-keyword">Dim</span> extractDir <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"extract"</span>
    <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(<span class="highlight-number">2048</span>) {}
    <span class="highlight-keyword">Using</span> raw <span class="highlight-keyword">As</span> FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read)
        <span class="highlight-keyword">Using</span> input <span class="highlight-keyword">As</span> ZipInputStream = <span class="highlight-keyword">New</span> ZipInputStream(raw)
            <span class="highlight-keyword">Dim</span> e <span class="highlight-keyword">As</span> ZipEntry
            <span class="highlight-keyword">Do</span> <span class="highlight-keyword">While</span> (<span class="highlight-keyword">Not</span> e = input.GetNextEntry <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>)
                <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> e.IsDirectory <span class="highlight-keyword">Then</span>
                    <span class="highlight-keyword">Using</span> output <span class="highlight-keyword">As</span> FileStream = File.Open(Path.Combine(extractDir, e.FileName), _
                                                           FileMode.Create, FileAccess.ReadWrite)
                        <span class="highlight-keyword">Dim</span> n <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>
                        <span class="highlight-keyword">Do</span> <span class="highlight-keyword">While</span> (n = input.Read(buffer, <span class="highlight-number">0</span>, buffer.Length) &gt; <span class="highlight-number">0</span>)
                            output.Write(buffer, <span class="highlight-number">0</span>, n)
                        <span class="highlight-keyword">Loop</span>
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Loop</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div></div><p><div id="footer"><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:dpchiesa%40hotmail.com?Subject=Ionic Zip Library v1.9.1.6">dpchiesa@hotmail.com</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script><p />Copyright 2009-2011, Dino Chiesa</div>Assembly: <span sdata="assembly">Ionic.Zip</span> (Module: Ionic.Zip) Version: 1.9.1.8 (1.9.1.8)</p></div></body></html>