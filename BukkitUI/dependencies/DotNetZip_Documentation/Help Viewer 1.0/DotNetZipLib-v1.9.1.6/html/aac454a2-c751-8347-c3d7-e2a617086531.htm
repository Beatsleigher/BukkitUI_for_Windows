<?xml version="1.0" encoding="utf-8"?><html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns="http://www.w3.org/1999/xhtml"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><title>Zip64Option Enumeration</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><meta name="file" content="aac454a2-c751-8347-c3d7-e2a617086531" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="T:Ionic.Zip.Zip64Option" /><MSHelp:Keyword Index="A" Term="T:Ionic.Zip.Zip64Option" /><MSHelp:Keyword Index="A" Term="frlrfIonicZipZip64OptionClassTopic" /><MSHelp:Keyword Index="A" Term="frlrfIonicZipZip64OptionMembersTopic" /><MSHelp:Keyword Index="K" Term="Zip64Option enumeration" /><MSHelp:Keyword Index="K" Term="Ionic.Zip.Zip64Option enumeration" /><MSHelp:Keyword Index="F" Term="Zip64Option" /><MSHelp:Keyword Index="F" Term="Ionic.Zip.Zip64Option" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="Ionic.Zip.dll" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.Zip64Option" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.Zip64Option.Default" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.Zip64Option.Never" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.Zip64Option.AsNecessary" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.Zip64Option.Always" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="Options for using ZIP64 extensions when saving zip archives." /></xml><meta name="SelfBranded" content="true" /><meta name="ContentType" content="Reference" /><meta name="Microsoft.Help.TopicVersion" content="100" /><meta name="Microsoft.Help.Keywords" content="Zip64Option enumeration" /><meta name="Microsoft.Help.Keywords" content="Ionic.Zip.Zip64Option enumeration" /><meta name="Microsoft.Help.F1" content="Zip64Option" /><meta name="Microsoft.Help.F1" content="Ionic.Zip.Zip64Option" /><meta name="Description" content="Options for using ZIP64 extensions when saving zip archives." /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><meta name="Microsoft.Help.Id" content="T:Ionic.Zip.Zip64Option" /><meta name="Microsoft.Help.TocParent" content="N:Ionic.Zip" /><meta name="Microsoft.Help.TOCParentTopicVersion" content="100" /><meta name="Microsoft.Help.TocOrder" content="21" /></head><body><div id="control"><span class="productTitle">Ionic Zip Library v1.9.1.6</span><br /><span class="topicTitle">Zip64Option Enumeration</span><br /><div id="toolbar"><span id="chickenFeet"><a href="ms-xhelp://?Id=R:Project">Reference</a> ► <a href="ms-xhelp://?Id=N:Ionic.Zip">Ionic.Zip</a> ► <span class="selflink">Zip64Option</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs" /><option value="VisualBasic vb" /><option value="ManagedCPlusPlus cpp" /></select></span></div></div><div id="main"><span style="color: DarkGray"></span><div class="summary">
               Options for using ZIP64 extensions when saving zip archives.
             </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Declaration Syntax</div><div class="sectionContent"><div id="syntaxSection"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="toggleClass('syntaxTabs','x-lang','CSharp','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','CSharp','display','block','none');" /><td class="tab" x-lang="VisualBasic" onclick="toggleClass('syntaxTabs','x-lang','VisualBasic','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','VisualBasic','display','block','none');" /><td class="tab" x-lang="ManagedCPlusPlus" onclick="toggleClass('syntaxTabs','x-lang','ManagedCPlusPlus','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','ManagedCPlusPlus','display','block','none');" /></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre xml:space="preserve">
<span class="keyword">public</span> <span class="keyword">enum</span> <span class="identifier">Zip64Option</span></pre></div><div class="code" x-lang="VisualBasic"><pre xml:space="preserve">
<span class="keyword">Public</span> <span class="keyword">Enumeration</span> <span class="identifier">Zip64Option</span></pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre xml:space="preserve">
<span class="keyword">public</span> <span class="keyword">enum class</span> <span class="identifier">Zip64Option</span></pre></div></div></div></div></div><div id="enumerationSection"><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Members</div><div class="sectionContent"><table class="membersMHS" id="memberList"><tr><th class="nameColumn">Member</th><th class="descriptionColumn">Description</th></tr><tr><td target="F:Ionic.Zip.Zip64Option.Default"><b><span class="selflink">Default</span></b></td><td>
            The default behavior, which is "Never".
            (For COM clients, this is a 0 (zero).)
            <br /></td></tr><tr><td target="F:Ionic.Zip.Zip64Option.Never"><b><span class="selflink">Never</span></b></td><td>
            Do not use ZIP64 extensions when writing zip archives.
            (For COM clients, this is a 0 (zero).)
            <br /></td></tr><tr><td target="F:Ionic.Zip.Zip64Option.AsNecessary"><b><span class="selflink">AsNecessary</span></b></td><td>
            Use ZIP64 extensions when writing zip archives, as necessary.
            For example, when a single entry exceeds 0xFFFFFFFF in size, or when the archive as a whole
            exceeds 0xFFFFFFFF in size, or when there are more than 65535 entries in an archive.
            (For COM clients, this is a 1.)
            <br /></td></tr><tr><td target="F:Ionic.Zip.Zip64Option.Always"><b><span class="selflink">Always</span></b></td><td>
            Always use ZIP64 extensions when writing zip archives, even when unnecessary.
            (For COM clients, this is a 2.)
            <br /></td></tr></table></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Remarks</div><div class="sectionContent"><p>
               Designed many years ago, the <a href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT" target="_blank">original zip
               specification from PKWARE</a> allowed for 32-bit quantities for the
               compressed and uncompressed sizes of zip entries, as well as a 32-bit quantity
               for specifying the length of the zip archive itself, and a maximum of 65535
               entries.  These limits are now regularly exceeded in many backup and archival
               scenarios.  Recently, PKWare added extensions to the original zip spec, called
               "ZIP64 extensions", to raise those limitations.  This property governs whether
               DotNetZip will use those extensions when writing zip archives. The use of
               these extensions is optional and explicit in DotNetZip because, despite the
               status of ZIP64 as a bona fide standard, many other zip tools and libraries do
               not support ZIP64, and therefore a zip file with ZIP64 extensions may be
               unreadable by some of those other tools.
             </p><p>
               Set this property to <span class="selflink">Always</span> to always use ZIP64
               extensions when saving, regardless of whether your zip archive needs it.
               Suppose you add 5 files, each under 100k, to a ZipFile. If you specify Always
               for this flag, you will get a ZIP64 archive, though the archive does not need
               to use ZIP64 because none of the original zip limits had been exceeded.
             </p><p>
               Set this property to <span class="selflink">Never</span> to tell the DotNetZip
               library to never use ZIP64 extensions.  This is useful for maximum
               compatibility and interoperability, at the expense of the capability of
               handling large files or large archives.  NB: Windows Explorer in Windows XP
               and Windows Vista cannot currently extract files from a zip64 archive, so if
               you want to guarantee that a zip archive produced by this library will work in
               Windows Explorer, use <span class="code">Never</span>. If you set this property to <span class="selflink">Never</span>, and your application creates a zip that would
               exceed one of the Zip limits, the library will throw an exception while saving
               the zip file.
             </p><p>
               Set this property to <span class="selflink">AsNecessary</span> to tell the
               DotNetZip library to use the ZIP64 extensions when required by the
               entry. After the file is compressed, the original and compressed sizes are
               checked, and if they exceed the limits described above, then zip64 can be
               used. That is the general idea, but there is an additional wrinkle when saving
               to a non-seekable device, like the ASP.NET <span class="code">Response.OutputStream</span>, or
               <span class="code">Console.Out</span>.  When using non-seekable streams for output, the entry
               header - which indicates whether zip64 is in use - is emitted before it is
               known if zip64 is necessary.  It is only after all entries have been saved
               that it can be known if ZIP64 will be required.  On seekable output streams,
               after saving all entries, the library can seek backward and re-emit the zip
               file header to be consistent with the actual ZIP64 requirement.  But using a
               non-seekable output stream, the library cannot seek backward, so the header
               can never be changed. In other words, the archive's use of ZIP64 extensions is
               not alterable after the header is emitted.  Therefore, when saving to
               non-seekable streams, using <span class="selflink">AsNecessary</span> is the same
               as using <span class="selflink">Always</span>: it will always produce a zip
               archive that uses ZIP64 extensions.
             </p></div></div><p><div id="footer"><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:dpchiesa%40hotmail.com?Subject=Ionic Zip Library v1.9.1.6">dpchiesa@hotmail.com</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script><p />Copyright 2009-2011, Dino Chiesa</div>Assembly: <span sdata="assembly">Ionic.Zip</span> (Module: Ionic.Zip) Version: 1.9.1.8 (1.9.1.8)</p></div></body></html>