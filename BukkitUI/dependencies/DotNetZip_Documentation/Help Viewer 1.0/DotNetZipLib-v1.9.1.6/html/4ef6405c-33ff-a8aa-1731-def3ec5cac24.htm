<?xml version="1.0" encoding="utf-8"?><html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns="http://www.w3.org/1999/xhtml"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><title>OpenReader Method </title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><meta name="file" content="4ef6405c-33ff-a8aa-1731-def3ec5cac24" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="M:Ionic.Zip.ZipEntry.OpenReader" /><MSHelp:Keyword Index="A" Term="M:Ionic.Zip.ZipEntry.OpenReader" /><MSHelp:Keyword Index="A" Term="frlrfIonicZipZipEntryClassOpenReaderTopic" /><MSHelp:Keyword Index="K" Term="OpenReader method" /><MSHelp:Keyword Index="K" Term="ZipEntry.OpenReader method" /><MSHelp:Keyword Index="F" Term="OpenReader" /><MSHelp:Keyword Index="F" Term="ZipEntry.OpenReader" /><MSHelp:Keyword Index="F" Term="Ionic.Zip.ZipEntry.OpenReader" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="Ionic.Zip.dll" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.ZipEntry.OpenReader" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="Opens a readable stream corresponding to the zip entry in the archive. The stream decompresses and decrypts as necessary, as it is read." /></xml><link type="text/css" rel="stylesheet" /><script type="text/javascript"></script><meta name="SelfBranded" content="true" /><meta name="ContentType" content="Reference" /><meta name="Microsoft.Help.TopicVersion" content="100" /><meta name="Microsoft.Help.Keywords" content="OpenReader method" /><meta name="Microsoft.Help.Keywords" content="ZipEntry.OpenReader method" /><meta name="Microsoft.Help.F1" content="OpenReader" /><meta name="Microsoft.Help.F1" content="ZipEntry.OpenReader" /><meta name="Microsoft.Help.F1" content="Ionic.Zip.ZipEntry.OpenReader" /><meta name="Description" content="Opens a readable stream corresponding to the zip entry in the archive. The stream decompresses and decrypts as necessary, as it is read." /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Ionic.Zip.ZipEntry.OpenReader" /><meta name="Microsoft.Help.TocParent" content="M:Ionic.Zip.ZipEntry.OpenReader" /><meta name="Microsoft.Help.TOCParentTopicVersion" content="100" /><meta name="Microsoft.Help.TocOrder" content="0" /></head><body><div id="control"><span class="productTitle">Ionic Zip Library v1.9.1.6</span><br /><span class="topicTitle">OpenReader Method </span><br /><div id="toolbar"><span id="chickenFeet"><a href="ms-xhelp://?Id=R:Project">Reference</a> ► <a href="ms-xhelp://?Id=N:Ionic.Zip">Ionic.Zip</a> ► <a href="ms-xhelp://?Id=T:Ionic.Zip.ZipEntry">ZipEntry</a> ► <span class="selflink">OpenReader<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs" /><option value="VisualBasic vb" /><option value="ManagedCPlusPlus cpp" /></select></span></div></div><div id="main"><span style="color: DarkGray"></span><div class="summary">
               Opens a readable stream corresponding to the zip entry in the
               archive.  The stream decompresses and decrypts as necessary, as it
               is read.
             </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Declaration Syntax</div><div class="sectionContent"><div id="syntaxSection"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="toggleClass('syntaxTabs','x-lang','CSharp','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','CSharp','display','block','none');" /><td class="tab" x-lang="VisualBasic" onclick="toggleClass('syntaxTabs','x-lang','VisualBasic','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','VisualBasic','display','block','none');" /><td class="tab" x-lang="ManagedCPlusPlus" onclick="toggleClass('syntaxTabs','x-lang','ManagedCPlusPlus','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','ManagedCPlusPlus','display','block','none');" /></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre xml:space="preserve">
<span class="keyword">public</span> <a href="ms-xhelp://?Id=T:Ionic.Crc.CrcCalculatorStream">CrcCalculatorStream</a> <span class="identifier">OpenReader</span>()</pre></div><div class="code" x-lang="VisualBasic"><pre xml:space="preserve">
<span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">OpenReader</span> <span class="keyword">As</span> <a href="ms-xhelp://?Id=T:Ionic.Crc.CrcCalculatorStream">CrcCalculatorStream</a></pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre xml:space="preserve">
<span class="keyword">public</span>:
<a href="ms-xhelp://?Id=T:Ionic.Crc.CrcCalculatorStream">CrcCalculatorStream</a>^ <span class="identifier">OpenReader</span>()</pre></div></div></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Return Value</div><div class="sectionContent">The Stream for reading.</div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Remarks</div><div class="sectionContent"><p>
               DotNetZip offers a variety of ways to extract entries from a zip
               file.  This method allows an application to extract an entry by
               reading a <a href="http://msdn2.microsoft.com/en-us/library/8f86tw9e" target="_blank">Stream</a>.
             </p><p>
               The return value is of type <a href="ms-xhelp://?Id=T:Ionic.Crc.CrcCalculatorStream">CrcCalculatorStream</a>.  Use it as you would any
               stream for reading.  When an application calls <a href="http://msdn2.microsoft.com/en-us/library/29tb55d8" target="_blank">Read(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32, Int32)</a> on that stream, it will
               receive data from the zip entry that is decrypted and decompressed
               as necessary.
             </p><p><span class="code">CrcCalculatorStream</span> adds one additional feature: it keeps a
               CRC32 checksum on the bytes of the stream as it is read.  The CRC
               value is available in the <a href="ms-xhelp://?Id=P:Ionic.Crc.CrcCalculatorStream.Crc">Crc</a> property on the
               <span class="code">CrcCalculatorStream</span>.  When the read is complete, your
               application
               <em>should</em> check this CRC against the <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipEntry.Crc">Crc</a>
               property on the <span class="code">ZipEntry</span> to validate the content of the
               ZipEntry. You don't have to validate the entry using the CRC, but
               you should, to verify integrity. Check the example for how to do
               this.
             </p><p>
               If the entry is protected with a password, then you need to provide
               a password prior to calling <span class="selflink">OpenReader<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></span>, either by
               setting the <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipEntry.Password">Password</a> property on the entry, or the
               <a href="ms-xhelp://?Id=P:Ionic.Zip.ZipFile.Password">Password</a> property on the <span class="code">ZipFile</span>
               itself. Or, you can use <a href="ms-xhelp://?Id=M:Ionic.Zip.ZipEntry.OpenReader(System.String)">OpenReader(String)</a>, the
               overload of OpenReader that accepts a password parameter.
             </p><p>
               If you want to extract entry data into a write-able stream that is
               already opened, like a <a href="http://msdn2.microsoft.com/en-us/library/y0bs3w9t" target="_blank">FileStream</a>, do not
               use this method. Instead, use <a href="ms-xhelp://?Id=M:Ionic.Zip.ZipEntry.Extract(System.IO.Stream)">Extract(Stream)</a>.
             </p><p>
               Your application may use only one stream created by OpenReader() at
               a time, and you should not call other Extract methods before
               completing your reads on a stream obtained from OpenReader().  This
               is because there is really only one source stream for the compressed
               content.  A call to OpenReader() seeks in the source stream, to the
               beginning of the compressed content.  A subsequent call to
               OpenReader() on a different entry will seek to a different position
               in the source stream, as will a call to Extract() or one of its
               overloads.  This will corrupt the state for the decompressing stream
               from the original call to OpenReader().
             </p><p>
                The <span class="code">OpenReader()</span> method works only when the ZipEntry is
                obtained from an instance of <span class="code">ZipFile</span>. This method will throw
                an exception if the ZipEntry is obtained from a <a href="ms-xhelp://?Id=T:Ionic.Zip.ZipInputStream">ZipInputStream</a>.
             </p></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Examples</div><div class="sectionContent">
               This example shows how to open a zip archive, then read in a named
               entry via a stream. After the read loop is complete, the code
               compares the calculated during the read loop with the expected CRC
               on the <span class="code">ZipEntry</span>, to verify the extraction.
             <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">using</span> (ZipFile zip = <span class="highlight-keyword">new</span> ZipFile(ZipFileToRead))
{
  ZipEntry e1= zip[<span class="highlight-literal">"Elevation.mp3"</span>];
  <span class="highlight-keyword">using</span> (Ionic.Zlib.CrcCalculatorStream s = e1.OpenReader())
  {
    <span class="highlight-keyword">byte</span>[] buffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[<span class="highlight-number">4096</span>];
    <span class="highlight-keyword">int</span> n, totalBytesRead= <span class="highlight-number">0</span>;
    <span class="highlight-keyword">do</span> {
      n = s.Read(buffer,<span class="highlight-number">0</span>, buffer.Length);
      totalBytesRead+=n;
    } <span class="highlight-keyword">while</span> (n&gt;<span class="highlight-number">0</span>);
     <span class="highlight-keyword">if</span> (s.Crc32 != e1.Crc32)
      <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})"</span>, s.Crc32, e1.Crc32));
     <span class="highlight-keyword">if</span> (totalBytesRead != e1.UncompressedSize)
      <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"We read an unexpected number of bytes. ({0}!={1})"</span>, totalBytesRead, e1.UncompressedSize));
  }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Using</span> zip <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> ZipFile(ZipFileToRead)
    <span class="highlight-keyword">Dim</span> e1 <span class="highlight-keyword">As</span> ZipEntry = zip.Item(<span class="highlight-literal">"Elevation.mp3"</span>)
    <span class="highlight-keyword">Using</span> s <span class="highlight-keyword">As</span> Ionic.Zlib.CrcCalculatorStream = e1.OpenReader
        <span class="highlight-keyword">Dim</span> n <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>
        <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(<span class="highlight-number">4096</span>) {}
        <span class="highlight-keyword">Dim</span> totalBytesRead <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
        <span class="highlight-keyword">Do</span>
            n = s.Read(buffer, <span class="highlight-number">0</span>, buffer.Length)
            totalBytesRead = (totalBytesRead + n)
        <span class="highlight-keyword">Loop</span> <span class="highlight-keyword">While</span> (n &gt; <span class="highlight-number">0</span>)
        <span class="highlight-keyword">If</span> (s.Crc32 &lt;&gt; e1.Crc32) <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-keyword">String</span>.Format(<span class="highlight-literal">"The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})"</span>, s.Crc32, e1.Crc32))
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">If</span> (totalBytesRead &lt;&gt; e1.UncompressedSize) <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-keyword">String</span>.Format(<span class="highlight-literal">"We read an unexpected number of bytes. ({0}!={1})"</span>, totalBytesRead, e1.UncompressedSize))
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span></pre></div></span></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> See Also</div><div class="sectionContent"><a href="ms-xhelp://?Id=M:Ionic.Zip.ZipEntry.Extract(System.IO.Stream)">Extract(Stream)</a><br /></div></div><p><div id="footer"><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:dpchiesa%40hotmail.com?Subject=Ionic Zip Library v1.9.1.6">dpchiesa@hotmail.com</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script><p />Copyright 2009-2011, Dino Chiesa</div>Assembly: <span sdata="assembly">Ionic.Zip</span> (Module: Ionic.Zip) Version: 1.9.1.8 (1.9.1.8)</p></div></body></html>