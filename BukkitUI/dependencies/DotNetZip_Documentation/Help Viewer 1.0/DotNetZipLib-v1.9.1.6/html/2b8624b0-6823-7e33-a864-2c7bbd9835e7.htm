<?xml version="1.0" encoding="utf-8"?><html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns="http://www.w3.org/1999/xhtml"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><title>SaveProgress Event</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><script type="text/javascript"></script><meta name="file" content="2b8624b0-6823-7e33-a864-2c7bbd9835e7" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="E:Ionic.Zip.ZipFile.SaveProgress" /><MSHelp:Keyword Index="A" Term="E:Ionic.Zip.ZipFile.SaveProgress" /><MSHelp:Keyword Index="A" Term="frlrfIonicZipZipFileClassSaveProgressTopic" /><MSHelp:Keyword Index="K" Term="SaveProgress event" /><MSHelp:Keyword Index="K" Term="ZipFile.SaveProgress event" /><MSHelp:Keyword Index="F" Term="SaveProgress" /><MSHelp:Keyword Index="F" Term="ZipFile.SaveProgress" /><MSHelp:Keyword Index="F" Term="Ionic.Zip.ZipFile.SaveProgress" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="Ionic.Zip.dll" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.ZipFile.SaveProgress" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.ZipFile.add_SaveProgress" /><MSHelp:Attr Name="APIName" Value="Ionic.Zip.ZipFile.remove_SaveProgress" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="An event handler invoked when a Save() starts, before and after each entry has been written to the archive, when a Save() completes, and during other Save events." /></xml><link type="text/css" rel="stylesheet" /><script type="text/javascript"></script><meta name="SelfBranded" content="true" /><meta name="ContentType" content="Reference" /><meta name="Microsoft.Help.TopicVersion" content="100" /><meta name="Microsoft.Help.Keywords" content="SaveProgress event" /><meta name="Microsoft.Help.Keywords" content="ZipFile.SaveProgress event" /><meta name="Microsoft.Help.F1" content="SaveProgress" /><meta name="Microsoft.Help.F1" content="ZipFile.SaveProgress" /><meta name="Microsoft.Help.F1" content="Ionic.Zip.ZipFile.SaveProgress" /><meta name="Description" content="An event handler invoked when a Save() starts, before and after each entry has been written to the archive, when a Save() completes, and during other Save events." /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><meta name="Microsoft.Help.Id" content="E:Ionic.Zip.ZipFile.SaveProgress" /><meta name="Microsoft.Help.TocParent" content="T:Ionic.Zip.ZipFile" /><meta name="Microsoft.Help.TOCParentTopicVersion" content="100" /><meta name="Microsoft.Help.TocOrder" content="61" /></head><body><div id="control"><span class="productTitle">Ionic Zip Library v1.9.1.6</span><br /><span class="topicTitle">SaveProgress Event</span><br /><div id="toolbar"><span id="chickenFeet"><a href="ms-xhelp://?Id=R:Project">Reference</a> ► <a href="ms-xhelp://?Id=N:Ionic.Zip">Ionic.Zip</a> ► <a href="ms-xhelp://?Id=T:Ionic.Zip.ZipFile">ZipFile</a> ► <span class="selflink">SaveProgress</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs" /><option value="VisualBasic vb" /><option value="ManagedCPlusPlus cpp" /></select></span></div></div><div id="main"><span style="color: DarkGray"></span><div class="summary">
               An event handler invoked when a Save() starts, before and after each
               entry has been written to the archive, when a Save() completes, and
               during other Save events.
             </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Declaration Syntax</div><div class="sectionContent"><div id="syntaxSection"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="toggleClass('syntaxTabs','x-lang','CSharp','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','CSharp','display','block','none');" /><td class="tab" x-lang="VisualBasic" onclick="toggleClass('syntaxTabs','x-lang','VisualBasic','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','VisualBasic','display','block','none');" /><td class="tab" x-lang="ManagedCPlusPlus" onclick="toggleClass('syntaxTabs','x-lang','ManagedCPlusPlus','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','ManagedCPlusPlus','display','block','none');" /></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre xml:space="preserve">
<span class="keyword">public</span> event <a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="ms-xhelp://?Id=T:Ionic.Zip.SaveProgressEventArgs">SaveProgressEventArgs</a>&gt; <span class="identifier">SaveProgress</span></pre></div><div class="code" x-lang="VisualBasic"><pre xml:space="preserve">
<span class="keyword">Public</span> Event <span class="identifier">SaveProgress</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>(<span class="keyword">Of</span> <a href="ms-xhelp://?Id=T:Ionic.Zip.SaveProgressEventArgs">SaveProgressEventArgs</a>)</pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre xml:space="preserve">
<span class="keyword">public</span>:
 <span class="keyword">event</span> <a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="ms-xhelp://?Id=T:Ionic.Zip.SaveProgressEventArgs">SaveProgressEventArgs</a>^&gt;^ <span class="identifier">SaveProgress</span> {
	<span class="keyword">void</span> <span class="keyword">add</span> (<a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="ms-xhelp://?Id=T:Ionic.Zip.SaveProgressEventArgs">SaveProgressEventArgs</a>^&gt;^ <span class="parameter">value</span>);
	<span class="keyword">void</span> <span class="keyword">remove</span> (<a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="ms-xhelp://?Id=T:Ionic.Zip.SaveProgressEventArgs">SaveProgressEventArgs</a>^&gt;^ <span class="parameter">value</span>);
}</pre></div></div></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Remarks</div><div class="sectionContent"><p>
               Depending on the particular event, different properties on the <a href="ms-xhelp://?Id=T:Ionic.Zip.SaveProgressEventArgs">SaveProgressEventArgs</a> parameter are set.  The following
               table summarizes the available EventTypes and the conditions under
               which this event handler is invoked with a
               <span class="code">SaveProgressEventArgs</span> with the given EventType.
             </p><table class="authoredTable"><tr><th>value of EntryType</th><th>Meaning and conditions</th></tr><tr><td>ZipProgressEventType.Saving_Started<br /></td><td>Fired when ZipFile.Save() begins.
             <br /></td></tr><tr><td>ZipProgressEventType.Saving_BeforeSaveEntry<br /></td><td>
               Fired within ZipFile.Save(), just before writing data for each
               particular entry.
             <br /></td></tr><tr><td>ZipProgressEventType.Saving_AfterSaveEntry<br /></td><td>
               Fired within ZipFile.Save(), just after having finished writing data
               for each particular entry.
             <br /></td></tr><tr><td>ZipProgressEventType.Saving_Completed<br /></td><td>Fired when ZipFile.Save() has completed.
             <br /></td></tr><tr><td>ZipProgressEventType.Saving_AfterSaveTempArchive<br /></td><td>
               Fired after the temporary file has been created.  This happens only
               when saving to a disk file.  This event will not be invoked when
               saving to a stream.
             <br /></td></tr><tr><td>ZipProgressEventType.Saving_BeforeRenameTempArchive<br /></td><td>
               Fired just before renaming the temporary file to the permanent
               location.  This happens only when saving to a disk file.  This event
               will not be invoked when saving to a stream.
             <br /></td></tr><tr><td>ZipProgressEventType.Saving_AfterRenameTempArchive<br /></td><td>
               Fired just after renaming the temporary file to the permanent
               location.  This happens only when saving to a disk file.  This event
               will not be invoked when saving to a stream.
             <br /></td></tr><tr><td>ZipProgressEventType.Saving_AfterCompileSelfExtractor<br /></td><td>
               Fired after a self-extracting archive has finished compiling.  This
               EventType is used only within SaveSelfExtractor().
             <br /></td></tr><tr><td>ZipProgressEventType.Saving_BytesRead<br /></td><td>
               Set during the save of a particular entry, to update progress of the
               Save().  When this EventType is set, the BytesTransferred is the
               number of bytes that have been read from the source stream.  The
               TotalBytesToTransfer is the number of bytes in the uncompressed
               file.
             <br /></td></tr></table></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Examples</div><div class="sectionContent">
            
                This example uses an anonymous method to handle the
                SaveProgress event, by updating a progress bar.
            
             <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">progressBar1.Value = <span class="highlight-number">0</span>;
progressBar1.Max = listbox1.Items.Count;
<span class="highlight-keyword">using</span> (ZipFile zip = <span class="highlight-keyword">new</span> ZipFile())
{
   <span class="highlight-comment">// listbox1 contains a list of filenames</span>
   zip.AddFiles(listbox1.Items);

   <span class="highlight-comment">// do the progress bar:</span>
   zip.SaveProgress += (sender, e) =&gt; {
      <span class="highlight-keyword">if</span> (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry) {
         progressBar1.PerformStep();
      }
   };

   zip.Save(fs);
}</pre></div></span></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Examples</div><div class="sectionContent">
               This example uses a named method as the
               <span class="code">SaveProgress</span> event handler, to update the user, in a
               console-based application.
            
             <span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">static</span> <span class="highlight-keyword">bool</span> justHadByteUpdate= <span class="highlight-keyword">false</span>;
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SaveProgress(<span class="highlight-keyword">object</span> sender, SaveProgressEventArgs e)
{
    <span class="highlight-keyword">if</span> (e.EventType == ZipProgressEventType.Saving_Started)
        Console.WriteLine(<span class="highlight-literal">"Saving: {0}"</span>, e.ArchiveName);

    <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (e.EventType == ZipProgressEventType.Saving_Completed)
    {
        justHadByteUpdate= <span class="highlight-keyword">false</span>;
        Console.WriteLine();
        Console.WriteLine(<span class="highlight-literal">"Done: {0}"</span>, e.ArchiveName);
    }

    <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
    {
        <span class="highlight-keyword">if</span> (justHadByteUpdate)
            Console.WriteLine();
        Console.WriteLine(<span class="highlight-literal">"  Writing: {0} ({1}/{2})"</span>,
                          e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal);
        justHadByteUpdate= <span class="highlight-keyword">false</span>;
    }

    <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (e.EventType == ZipProgressEventType.Saving_EntryBytesRead)
    {
        <span class="highlight-keyword">if</span> (justHadByteUpdate)
            Console.SetCursorPosition(<span class="highlight-number">0</span>, Console.CursorTop);
         Console.Write(<span class="highlight-literal">"     {0}/{1} ({2:N0}%)"</span>, e.BytesTransferred, e.TotalBytesToTransfer,
                      e.BytesTransferred / (<span class="highlight-number">0.01</span> * e.TotalBytesToTransfer ));
        justHadByteUpdate= <span class="highlight-keyword">true</span>;
    }
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> ZipUp(<span class="highlight-keyword">string</span> targetZip, <span class="highlight-keyword">string</span> directory)
{
  <span class="highlight-keyword">using</span> (var zip = <span class="highlight-keyword">new</span> ZipFile()) {
    zip.SaveProgress += SaveProgress;
    zip.AddDirectory(directory);
    zip.Save(targetZip);
  }
}</pre></div></span><span id="cbc_3" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> ZipUp(<span class="highlight-keyword">ByVal</span> targetZip <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>, <span class="highlight-keyword">ByVal</span> directory <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>)
    <span class="highlight-keyword">Using</span> zip <span class="highlight-keyword">As</span> ZipFile = <span class="highlight-keyword">New</span> ZipFile
        <span class="highlight-keyword">AddHandler</span> zip.SaveProgress, <span class="highlight-keyword">AddressOf</span> MySaveProgress
        zip.AddDirectory(directory)
        zip.Save(targetZip)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> justHadByteUpdate <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>

<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> MySaveProgress(<span class="highlight-keyword">ByVal</span> sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, <span class="highlight-keyword">ByVal</span> e <span class="highlight-keyword">As</span> SaveProgressEventArgs)
    <span class="highlight-keyword">If</span> (e.EventType <span class="highlight-keyword">Is</span> ZipProgressEventType.Saving_Started) <span class="highlight-keyword">Then</span>
        Console.WriteLine(<span class="highlight-literal">"Saving: {0}"</span>, e.ArchiveName)

    <span class="highlight-keyword">ElseIf</span> (e.EventType <span class="highlight-keyword">Is</span> ZipProgressEventType.Saving_Completed) <span class="highlight-keyword">Then</span>
        justHadByteUpdate = <span class="highlight-keyword">False</span>
        Console.WriteLine
        Console.WriteLine(<span class="highlight-literal">"Done: {0}"</span>, e.ArchiveName)

    <span class="highlight-keyword">ElseIf</span> (e.EventType <span class="highlight-keyword">Is</span> ZipProgressEventType.Saving_BeforeWriteEntry) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">If</span> justHadByteUpdate <span class="highlight-keyword">Then</span>
            Console.WriteLine
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        Console.WriteLine(<span class="highlight-literal">"  Writing: {0} ({1}/{2})"</span>, e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal)
        justHadByteUpdate = <span class="highlight-keyword">False</span>

    <span class="highlight-keyword">ElseIf</span> (e.EventType <span class="highlight-keyword">Is</span> ZipProgressEventType.Saving_EntryBytesRead) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">If</span> justHadByteUpdate <span class="highlight-keyword">Then</span>
            Console.SetCursorPosition(<span class="highlight-number">0</span>, Console.CursorTop)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        Console.Write(<span class="highlight-literal">"     {0}/{1} ({2:N0}%)"</span>, e.BytesTransferred, _
                      e.TotalBytesToTransfer, _
                      (<span class="highlight-keyword">CDbl</span>(e.BytesTransferred) / (<span class="highlight-number">0.01</span> * e.TotalBytesToTransfer)))
        justHadByteUpdate = <span class="highlight-keyword">True</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> Examples</div><div class="sectionContent">
            
             This is a more complete example of using the SaveProgress
             events in a Windows Forms application, with a
             Thread object.
            
             <span id="cbc_4" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">delegate</span> <span class="highlight-keyword">void</span> SaveEntryProgress(SaveProgressEventArgs e);
<span class="highlight-keyword">delegate</span> <span class="highlight-keyword">void</span> ButtonClick(<span class="highlight-keyword">object</span> sender, EventArgs e);

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> WorkerOptions
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> ZipName;
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Folder;
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Encoding;
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Comment;
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> ZipFlavor;
    <span class="highlight-keyword">public</span> Zip64Option Zip64;
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">int</span> _progress2MaxFactor;
<span class="highlight-keyword">private</span> <span class="highlight-keyword">bool</span> _saveCanceled;
<span class="highlight-keyword">private</span> <span class="highlight-keyword">long</span> _totalBytesBeforeCompress;
<span class="highlight-keyword">private</span> <span class="highlight-keyword">long</span> _totalBytesAfterCompress;
<span class="highlight-keyword">private</span> Thread _workerThread;


<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> btnZipup_Click(<span class="highlight-keyword">object</span> sender, EventArgs e)
{
    KickoffZipup();
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> btnCancel_Click(<span class="highlight-keyword">object</span> sender, EventArgs e)
{
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.lblStatus.InvokeRequired)
    {
        <span class="highlight-keyword">this</span>.lblStatus.Invoke(<span class="highlight-keyword">new</span> ButtonClick(<span class="highlight-keyword">this</span>.btnCancel_Click), <span class="highlight-keyword">new</span> <span class="highlight-keyword">object</span>[] { sender, e });
    }
    <span class="highlight-keyword">else</span>
    {
        _saveCanceled = <span class="highlight-keyword">true</span>;
        lblStatus.Text = <span class="highlight-literal">"Canceled..."</span>;
        ResetState();
    }
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> KickoffZipup()
{
    _folderName = tbDirName.Text;

    <span class="highlight-keyword">if</span> (_folderName == <span class="highlight-keyword">null</span> || _folderName == <span class="highlight-literal">""</span>) <span class="highlight-keyword">return</span>;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.tbZipName.Text == <span class="highlight-keyword">null</span> || <span class="highlight-keyword">this</span>.tbZipName.Text == <span class="highlight-literal">""</span>) <span class="highlight-keyword">return</span>;

    <span class="highlight-comment">// check for existence of the zip file:</span>
    <span class="highlight-keyword">if</span> (System.IO.File.Exists(<span class="highlight-keyword">this</span>.tbZipName.Text))
    {
        var dlgResult = MessageBox.Show(String.Format(<span class="highlight-literal">"The file you have specified ({0}) already exists."</span> +
                                                      <span class="highlight-literal">"  Do you want to overwrite this file?"</span>, <span class="highlight-keyword">this</span>.tbZipName.Text),
                                        <span class="highlight-literal">"Confirmation is Required"</span>, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        <span class="highlight-keyword">if</span> (dlgResult != DialogResult.Yes) <span class="highlight-keyword">return</span>;
        System.IO.File.Delete(<span class="highlight-keyword">this</span>.tbZipName.Text);
    }

     _saveCanceled = <span class="highlight-keyword">false</span>;
    _nFilesCompleted = <span class="highlight-number">0</span>;
    _totalBytesAfterCompress = <span class="highlight-number">0</span>;
    _totalBytesBeforeCompress = <span class="highlight-number">0</span>;
    <span class="highlight-keyword">this</span>.btnOk.Enabled = <span class="highlight-keyword">false</span>;
    <span class="highlight-keyword">this</span>.btnOk.Text = <span class="highlight-literal">"Zipping..."</span>;
    <span class="highlight-keyword">this</span>.btnCancel.Enabled = <span class="highlight-keyword">true</span>;
    lblStatus.Text = <span class="highlight-literal">"Zipping..."</span>;

    var options = <span class="highlight-keyword">new</span> WorkerOptions
    {
        ZipName = <span class="highlight-keyword">this</span>.tbZipName.Text,
        Folder = _folderName,
        Encoding = <span class="highlight-literal">"ibm437"</span>
    };

    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.comboBox1.SelectedIndex != <span class="highlight-number">0</span>)
    {
        options.Encoding = <span class="highlight-keyword">this</span>.comboBox1.SelectedItem.ToString();
    }

    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.radioFlavorSfxCmd.Checked)
        options.ZipFlavor = <span class="highlight-number">2</span>;
    <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.radioFlavorSfxGui.Checked)
        options.ZipFlavor = <span class="highlight-number">1</span>;
    <span class="highlight-keyword">else</span> options.ZipFlavor = <span class="highlight-number">0</span>;

    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.radioZip64AsNecessary.Checked)
        options.Zip64 = Zip64Option.AsNecessary;
    <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.radioZip64Always.Checked)
        options.Zip64 = Zip64Option.Always;
    <span class="highlight-keyword">else</span> options.Zip64 = Zip64Option.Never;

    options.Comment = String.Format(<span class="highlight-literal">"Encoding:{0} || Flavor:{1} || ZIP64:{2}\r\nCreated at {3} || {4}\r\n"</span>,
                options.Encoding,
                FlavorToString(options.ZipFlavor),
                options.Zip64.ToString(),
                System.DateTime.Now.ToString(<span class="highlight-literal">"yyyy-MMM-dd HH:mm:ss"</span>),
                <span class="highlight-keyword">this</span>.Text);

    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.tbComment.Text != TB_COMMENT_NOTE)
        options.Comment += <span class="highlight-keyword">this</span>.tbComment.Text;

    _workerThread = <span class="highlight-keyword">new</span> Thread(<span class="highlight-keyword">this</span>.DoSave);
    _workerThread.Name = <span class="highlight-literal">"Zip Saver thread"</span>;
    _workerThread.Start(options);
    <span class="highlight-keyword">this</span>.Cursor = Cursors.WaitCursor;
 }


<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> DoSave(Object p)
{
    WorkerOptions options = p <span class="highlight-keyword">as</span> WorkerOptions;
    <span class="highlight-keyword">try</span>
    {
        <span class="highlight-keyword">using</span> (var zip1 = <span class="highlight-keyword">new</span> ZipFile())
        {
            zip1.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding(options.Encoding);
            zip1.Comment = options.Comment;
            zip1.AddDirectory(options.Folder);
            _entriesToZip = zip1.EntryFileNames.Count;
            SetProgressBars();
            zip1.SaveProgress += <span class="highlight-keyword">this</span>.zip1_SaveProgress;

            zip1.UseZip64WhenSaving = options.Zip64;

            <span class="highlight-keyword">if</span> (options.ZipFlavor == <span class="highlight-number">1</span>)
                zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.WinFormsApplication);
            <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (options.ZipFlavor == <span class="highlight-number">2</span>)
                zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.ConsoleApplication);
            <span class="highlight-keyword">else</span>
                zip1.Save(options.ZipName);
        }
    }
    <span class="highlight-keyword">catch</span> (System.Exception exc1)
    {
        MessageBox.Show(String.Format(<span class="highlight-literal">"Exception while zipping: {0}"</span>, exc1.Message));
        btnCancel_Click(<span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
    }
}



<span class="highlight-keyword">void</span> zip1_SaveProgress(<span class="highlight-keyword">object</span> sender, SaveProgressEventArgs e)
{
    <span class="highlight-keyword">switch</span> (e.EventType)
    {
        <span class="highlight-keyword">case</span> ZipProgressEventType.Saving_AfterWriteEntry:
            StepArchiveProgress(e);
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> ZipProgressEventType.Saving_EntryBytesRead:
            StepEntryProgress(e);
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> ZipProgressEventType.Saving_Completed:
            SaveCompleted();
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> ZipProgressEventType.Saving_AfterSaveTempArchive:
            <span class="highlight-comment">// this event only occurs when saving an SFX file</span>
            TempArchiveSaved();
            <span class="highlight-keyword">break</span>;
    }
    <span class="highlight-keyword">if</span> (_saveCanceled)
        e.Cancel = <span class="highlight-keyword">true</span>;
}



<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> StepArchiveProgress(SaveProgressEventArgs e)
{
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.progressBar1.InvokeRequired)
    {
        <span class="highlight-keyword">this</span>.progressBar1.Invoke(<span class="highlight-keyword">new</span> SaveEntryProgress(<span class="highlight-keyword">this</span>.StepArchiveProgress), <span class="highlight-keyword">new</span> <span class="highlight-keyword">object</span>[] { e });
    }
    <span class="highlight-keyword">else</span>
    {
        <span class="highlight-keyword">if</span> (!_saveCanceled)
        {
            _nFilesCompleted++;
            <span class="highlight-keyword">this</span>.progressBar1.PerformStep();
            _totalBytesAfterCompress += e.CurrentEntry.CompressedSize;
            _totalBytesBeforeCompress += e.CurrentEntry.UncompressedSize;

            <span class="highlight-comment">// reset the progress bar for the entry:</span>
            <span class="highlight-keyword">this</span>.progressBar2.Value = <span class="highlight-keyword">this</span>.progressBar2.Maximum = <span class="highlight-number">1</span>;

            <span class="highlight-keyword">this</span>.Update();
        }
    }
}


<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> StepEntryProgress(SaveProgressEventArgs e)
{
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.progressBar2.InvokeRequired)
    {
        <span class="highlight-keyword">this</span>.progressBar2.Invoke(<span class="highlight-keyword">new</span> SaveEntryProgress(<span class="highlight-keyword">this</span>.StepEntryProgress), <span class="highlight-keyword">new</span> <span class="highlight-keyword">object</span>[] { e });
    }
    <span class="highlight-keyword">else</span>
    {
        <span class="highlight-keyword">if</span> (!_saveCanceled)
        {
            <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.progressBar2.Maximum == <span class="highlight-number">1</span>)
            {
                <span class="highlight-comment">// reset</span>
                Int64 max = e.TotalBytesToTransfer;
                _progress2MaxFactor = <span class="highlight-number">0</span>;
                <span class="highlight-keyword">while</span> (max &gt; System.Int32.MaxValue)
                {
                    max /= <span class="highlight-number">2</span>;
                    _progress2MaxFactor++;
                }
                <span class="highlight-keyword">this</span>.progressBar2.Maximum = (<span class="highlight-keyword">int</span>)max;
                lblStatus.Text = String.Format(<span class="highlight-literal">"{0} of {1} files...({2})"</span>,
                    _nFilesCompleted + <span class="highlight-number">1</span>, _entriesToZip, e.CurrentEntry.FileName);
            }

             <span class="highlight-keyword">int</span> xferred = e.BytesTransferred &gt;&gt; _progress2MaxFactor;

             <span class="highlight-keyword">this</span>.progressBar2.Value = (xferred &gt;= <span class="highlight-keyword">this</span>.progressBar2.Maximum)
                ? <span class="highlight-keyword">this</span>.progressBar2.Maximum
                : xferred;

             <span class="highlight-keyword">this</span>.Update();
        }
    }
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> SaveCompleted()
{
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.lblStatus.InvokeRequired)
    {
        <span class="highlight-keyword">this</span>.lblStatus.Invoke(<span class="highlight-keyword">new</span> MethodInvoker(<span class="highlight-keyword">this</span>.SaveCompleted));
    }
    <span class="highlight-keyword">else</span>
    {
        lblStatus.Text = String.Format(<span class="highlight-literal">"Done, Compressed {0} files, {1:N0}% of original."</span>,
            _nFilesCompleted, (<span class="highlight-number">100.00</span> * _totalBytesAfterCompress) / _totalBytesBeforeCompress);
         ResetState();
    }
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ResetState()
{
    <span class="highlight-keyword">this</span>.btnCancel.Enabled = <span class="highlight-keyword">false</span>;
    <span class="highlight-keyword">this</span>.btnOk.Enabled = <span class="highlight-keyword">true</span>;
    <span class="highlight-keyword">this</span>.btnOk.Text = <span class="highlight-literal">"Zip it!"</span>;
    <span class="highlight-keyword">this</span>.progressBar1.Value = <span class="highlight-number">0</span>;
    <span class="highlight-keyword">this</span>.progressBar2.Value = <span class="highlight-number">0</span>;
    <span class="highlight-keyword">this</span>.Cursor = Cursors.Default;
    <span class="highlight-keyword">if</span> (!_workerThread.IsAlive)
        _workerThread.Join();
}</pre></div></span></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img /> See Also</div><div class="sectionContent"><a href="ms-xhelp://?Id=E:Ionic.Zip.ZipFile.ReadProgress">ReadProgress</a><br /><a href="ms-xhelp://?Id=E:Ionic.Zip.ZipFile.AddProgress">AddProgress</a><br /><a href="ms-xhelp://?Id=E:Ionic.Zip.ZipFile.ExtractProgress">ExtractProgress</a><br /></div></div><p><div id="footer"><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:dpchiesa%40hotmail.com?Subject=Ionic Zip Library v1.9.1.6">dpchiesa@hotmail.com</a><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script><p />Copyright 2009-2011, Dino Chiesa</div>Assembly: <span sdata="assembly">Ionic.Zip</span> (Module: Ionic.Zip) Version: 1.9.1.8 (1.9.1.8)</p></div></body></html>